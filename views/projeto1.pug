doctype html
html(lang="pt-BR")
  head
    title Monitoramento de Animais
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet" href="/css/design-system.css")
    link(rel="stylesheet" href="/css/projeto1.css")
    
    include ./partials/styles.pug
    script(src="/components/user-settings/settings.js")
    
  body
    // Animated background
    .glass-background
    
    // Glass navigation
    header.glass-navbar
      .container
        a.glass-logo(href="/")
          span Projetos IOT
        nav.nav-right
          if user
            button.profile-button(type="button")
              img.profile-photo(
                src=user.avatarUrl || '/img/default-avatar.png'
                alt=`${user.username}`
              )
              span.username #{user.username}

    // Main content container
    .projeto1-container
      .container
        .page-header
          h1.page-title Monitoramento de Animais
          p.page-subtitle Sistema de cadastro e monitoramento para identificação e controle de acesso de animais via RFID

        if error
          .glass-alert.alert-error= error
        if success
          .glass-alert.alert-success= success

        // Cards grid - layout original adaptado para glassmorphism
        .cards-grid
          // Card de Cadastro
          .card.form-card
            .card-header
              span.card-icon 🐄
              h3.card-title Cadastro de Animal
            
            .card-content
              form.glass-form(action="/projeto1/register" method="POST")
                .form-group
                  label.form-label(for="identifier") Identificador do animal
                  input#identifier.glass-input(type="text" name="identifier" placeholder="Ex: A123" required)
                
                .form-group
                  label.form-label(for="allowed") Permitido
                  select#allowed.glass-select(name="allowed" required)
                    option(value="" disabled selected) Selecione uma opção
                    option(value="sim") Sim
                    option(value="nao") Não
                
                .form-actions
                  button.glass-button-primary(type="submit") Cadastrar

          // Card de Animais Registrados
          .card.records-card
            .card-header
              span.card-icon 📋
              h3.card-title Animais Registrados
            
            .card-content
              .animals-list
                if registros.length
                  each registro in registros
                    - const valorPeso = (registro.peso && registro.peso.peso) ? registro.peso.peso : 'Não recebido'
                    .animal-item
                      .animal-main
                        .animal-id #{registro.identifier}
                        .animal-status(class=registro.allowed === 'sim' ? 'status-allowed' : 'status-denied')
                          .status-indicator
                          span.status-text #{registro.allowed === 'sim' ? 'Permitido' : 'Negado'}
                      
                      .animal-details
                        .detail-row
                          span.detail-label Peso (kg):
                          span.detail-value(id=`peso-${registro.identifier}`) #{valorPeso}
                        
                        .detail-row
                          span.detail-label Atualizado em:
                          span.detail-value(id=`data-${registro.identifier}`) #{registro.dataPesoAtualizado ? new Date(registro.dataPesoAtualizado).toLocaleString("pt-BR") : 'Sem registro'}
                        
                        if registro.registradoPor
                          .detail-row
                            span.detail-label Cadastrado por:
                            span.detail-value #{registro.registradoPor}
                        
                        if registro.data
                          .detail-row.timestamp
                            span.detail-value #{new Date(registro.data).toLocaleString("pt-BR")}
                      
                      .animal-actions
                        form(action=`/projeto1/delete/${registro.identifier}` method="POST" style="display: inline;")
                          button.glass-button-danger.delete-button(type="submit") Excluir
                else
                  .empty-state
                    .empty-icon 🐄
                    .empty-title Nenhum animal cadastrado
                    .empty-subtitle Use o formulário ao lado para cadastrar o primeiro animal

        // Botão de histórico
        .history-section
          button.glass-button-secondary.history-button(onclick="window.location.href='/projeto1/history'")
            span.icon 📊
            span Histórico completo dos animais

    // Incluir o card de configurações do usuário
    if user
      include ../components/user-settings/settings.pug

    script(src="/components/user-settings/settings.js")
    script(src="/socket.io/socket.io.js")
    script.
      const socket = io();
      socket.on('pesoAtualizado', function(data) {
        console.log("Recebido via socket:", data);
        const pesoSpan = document.getElementById(`peso-${data.identifier}`);
        const dataSpan = document.getElementById(`data-${data.identifier}`);
        const valorPeso = typeof data.peso === 'object' ? data.peso.peso : data.peso;
        const dataAtualizacao = typeof data.peso === 'object' 
          ? data.peso.dataAtualizacao 
          : new Date().toISOString();
        if (pesoSpan) {
          pesoSpan.textContent = valorPeso;
        }
        if (dataSpan) {
          const dataFormatada = new Date(dataAtualizacao).toLocaleString("pt-BR");
          dataSpan.textContent = `Atualizado em: ${dataFormatada}`;
        }
      });
      socket.on('connect', () => console.log('Socket.IO conectado'));
      socket.on('disconnect', () => console.log('Socket.IO desconectado'));
