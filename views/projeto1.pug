doctype html
html(lang="pt-BR")
  head
    title Cadastro de Animal
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css")
    link(rel="stylesheet" href="css/custom.css")
  body
    header.navbar.bg-dark.p-3.mb-4
      .container.d-flex.justify-content-between.align-items-center
        a.logo-text(href="/")
          span.text-white Projetos IOT
        if user
          span.text-white.small Logado como #{user.username}

    .container
      .row
        // COLUNA ESQUERDA – FORMULÁRIO
        .col-md-6.d-flex.flex-column.align-items-center.justify-content-start
          .card.shadow-lg.w-100.mb-3(style="max-width: 400px; margin-top: 0px;")
            .card-body
              h4.card-title.text-center Cadastro de Animal

              if error
                .alert.alert-danger.text-center.mb-3= error
              if success
                .alert.alert-success.text-center= success

              form#formCadastro
                .mb-3
                  label.form-label(for="identifier") Identificador do animal
                  input#identifier.form-control(type="text" name="identifier" placeholder="Ex: A123" required)
                .mb-3
                  label.form-label(for="allowed") Permitido
                  select#allowed.form-select(name="allowed" required)
                    option(value="" disabled selected) Selecione uma opção
                    option(value="sim") Sim
                    option(value="nao") Não
                button.btn.btn-success.w-100(type="submit") Cadastrar
                p.text-center.mt-3
                  a(href="/") Voltar à página inicial

          a.btn.btn-outline-secondary.mt-2(href="/projeto1/registered" target="_blank") Histórico completo dos animais

        // COLUNA DIREITA – LISTA DE REGISTROS
        .col-md-6(style="max-height: 80vh; overflow-y: auto;")
          h4.mb-3.text-center Animais Registrados
          #lista-registros
            if registros.length
              each registro in registros
                - const valorPeso = (registro.peso && registro.peso.peso) ? registro.peso.peso : registro.peso || 'Não recebido'
                .border.p-3.mb-2.rounded.bg-light
                  strong Identificador: 
                  | #{registro.identifier}
                  br
                  strong Permitido: 
                  | #{registro.allowed === 'sim' ? 'Sim' : 'Não'}
                  br
                  strong Peso (kg): 
                  span(id=`peso-${registro.identifier}`) #{valorPeso}
                  br
                  small.text-muted(id=`data-${registro.identifier}`)| Atualizado em: #{registro.dataPesoAtualizado ? new Date(registro.dataPesoAtualizado).toLocaleString("pt-BR") : 'Sem registro'}
                  if registro.registradoPor
                    br
                    small.text-muted Registrado por: #{registro.registradoPor}
                  if registro.data
                    br
                    small.text-muted Registrado em: #{new Date(registro.data).toLocaleString("pt-BR")}
                  br
                  form(action=`/projeto1/delete/${registro.identifier}` method="POST" style="display: inline;")
                    button.btn.btn-sm.btn-danger.mt-2(type="submit") Excluir
            else
              p.text-muted#mensagem-vazia Nenhum animal registrado ainda.

    script(src="/socket.io/socket.io.js")
    script.
      const socket = io();
      const form = document.getElementById('formCadastro');

      form.addEventListener('submit', async function(event) {
        event.preventDefault();

        const identifier = document.getElementById('identifier').value.trim();
        const allowed = document.getElementById('allowed').value;

        if (!identifier || !allowed) {
          alert('Preencha todos os campos');
          return;
        }

        try {
          const response = await fetch('/projeto1/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ identifier, allowed })
          });

          if (response.ok) {
          form.reset();
          alert('Animal registrado com sucesso');
        } else {
          const result = await response.json();
          alert(result?.error || 'Erro ao registrar animal');
        }

      });

      socket.on('novoRegistro', function(novoRegistro) {
        const lista = document.getElementById('lista-registros');
        const vazioMsg = document.getElementById('mensagem-vazia');
        if (vazioMsg) vazioMsg.remove();

        const novoHTML = `
          <div class="border p-3 mb-2 rounded bg-light">
            <strong>Identificador:</strong> ${novoRegistro.identifier}<br>
            <strong>Permitido:</strong> ${novoRegistro.allowed === 'sim' ? 'Sim' : 'Não'}<br>
            <strong>Peso (kg):</strong> <span id="peso-${novoRegistro.identifier}">${novoRegistro.peso}</span><br>
            <small class="text-muted" id="data-${novoRegistro.identifier}">
              Atualizado em: ${new Date().toLocaleString("pt-BR")}
            </small><br>
            <small class="text-muted">Registrado por: ${novoRegistro.registradoPor}</small><br>
            <small class="text-muted">Registrado em: ${new Date(novoRegistro.data).toLocaleString("pt-BR")}</small><br>
            <form action="/projeto1/delete/${novoRegistro.identifier}" method="POST" style="display:inline;">
              <button class="btn btn-sm btn-danger mt-2" type="submit">Excluir</button>
            </form>
          </div>
        `;

        lista.insertAdjacentHTML('afterbegin', novoHTML);
      });

      socket.on('pesoAtualizado', function(registroAtualizado) {
        const pesoSpan = document.getElementById(`peso-${registroAtualizado.identifier}`);
        const dataSpan = document.getElementById(`data-${registroAtualizado.identifier}`);

        const valorPeso = typeof registroAtualizado.peso === 'object' ? registroAtualizado.peso.peso : registroAtualizado.peso;
        const dataAtualizacao = new Date().toISOString();

        if (pesoSpan) {
          pesoSpan.textContent = valorPeso;
        }

        if (dataSpan) {
          const dataFormatada = new Date(dataAtualizacao).toLocaleString("pt-BR");
          dataSpan.textContent = `Atualizado em: ${dataFormatada}`;
        }
      });
      socket.on('registroRemovido', function(dado) {
        const elemento = document.querySelector(`form[action="/projeto1/delete/${dado.identifier}"]`);
        if (elemento) {
          const container = elemento.closest('.border');
          if (container) container.remove();
        }
      });
      
      socket.on('registroAtualizado', function(registroAtualizado) {
        const pesoSpan = document.getElementById(`peso-${registroAtualizado.identifier}`);
        const dataSpan = document.getElementById(`data-${registroAtualizado.identifier}`);
        const container = pesoSpan?.closest('.border');

        if (container) {
          container.querySelector('strong + br + strong + br + strong + span').textContent = registroAtualizado.peso;
          container.querySelector(`#data-${registroAtualizado.identifier}`).textContent = `Atualizado em: ${new Date().toLocaleString("pt-BR")}`;

          const permitidoText = registroAtualizado.allowed === 'sim' ? 'Sim' : 'Não';
          const permitidoEl = Array.from(container.childNodes).find(el => el?.textContent?.includes("Permitido:"));
          if (permitidoEl) permitidoEl.nextSibling.textContent = ` ${permitidoText}`;
        }
      });

      socket.on('registroAtualizado', function(registro) {
        const container = document.querySelector(`#peso-${registro.identifier}`)?.closest('.border');
        if (!container) return;

        // Atualiza o valor do peso
        const pesoEl = document.querySelector(`#peso-${registro.identifier}`);
        if (pesoEl) pesoEl.textContent = registro.peso;

        // Atualiza o "Permitido"
        const permitidoLine = Array.from(container.childNodes).find(n => n.nodeType === Node.TEXT_NODE && n.textContent.includes("Permitido:"));
        if (permitidoLine && permitidoLine.nextSibling) {
          permitidoLine.nextSibling.textContent = ` ${registro.allowed === 'sim' ? 'Sim' : 'Não'}`;
        }

        // Atualiza a data
        const dataEl = document.querySelector(`#data-${registro.identifier}`);
        if (dataEl) {
          dataEl.textContent = `Atualizado em: ${new Date().toLocaleString("pt-BR")}`;
        }
      });




      socket.on('connect', () => console.log('Socket.IO conectado'));
      socket.on('disconnect', () => console.log('Socket.IO desconectado'));

          // Esconde alertas automaticamente após 5 segundos
    setTimeout(() => {
      const alert = document.querySelector('.alert-success, .alert-danger');
      if (alert) alert.remove();
    }, 5000);
